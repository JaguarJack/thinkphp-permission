<?php
/**
 * Roles.php
 * Created by wuyanwen <wuyanwen1992@gmail.com>
 * Date: 2018/9/26 0026 20:12
 */
namespace think\permissions\model;

use think\Model;

class Roles extends Model
{
	public function initialize()
	{
		parent::initialize(); // TODO: Change the autogenerated stub
		$this->name = config('permissions.table.role');
	}

	public function permissions()
	{
		return $this->belongsToMany(config('permissions.model.permission'), config('permissions.table.role_has_permissions'), 'permission_id', 'role_id');
	}

	public function users()
	{
		return $this->belongsToMany(config('permissions.model.user'), 'user_has_roles', 'uid', 'role_id');
	}

	/**
	 * find role by id
	 *
	 * @author wuyanwen <wuyanwen1992@gmail.com> at 2018年09月28日 23:22
	 * @param $role_id
	 * @return array|false|\PDOStatement|string|Model
	 */
	public function getRoleBy($role_id)
	{
		return $this->where('id', $role_id)->find();
	}

	/**
	 * Get Permissions Of Role
	 *
	 * @author wuyanwen <wuyanwen1992@gmail.com> at 2018年09月28日 23:26
	 * @param $role_id
	 * @return mixed
	 */
	public function getPermissions($full = true)
	{
		return $full ? $this->permissions : $this->permissions()->column('permission_id');
	}


	/**
	 * Attach Permission To Role
	 *
	 * @author wuyanwen <wuyanwen1992@gmail.com> at 2018年09月28日 23:24
	 * @param $roles_id
	 * @param null $permissions
	 * @return mixed
	 */
	public function attachPermissions($roles_id, $permissions = null)
	{
		return $this->getRoleBy($roles_id)->permissions()->attach($permissions);
	}

	/**
	 * Detach Permissions of Role
	 *
	 * @author wuyanwen <wuyanwen1992@gmail.com> at 2018年09月28日 23:25
	 * @param $role_id
	 * @param null $permissions
	 * @return mixed
	 */
	public function detachPermissions($role_id, $permissions = null)
	{

		return $this->getRoleBy($role_id)->permissions()->detach($permissions);
	}

	/**
	 * Detach Users of Role
	 *
	 * @author wuyanwen <wuyanwen1992@gmail.com> at 2018年10月02日 22:02
	 * @param $id
	 * @param null $users
	 * @return mixed
	 */
	public function detachUsers($id, $users = null)
	{
		return $this->getRoleBy($id)->users()->detach($users);
	}
	/**
	 * Delete Role
	 *
	 * @author wuyanwen <wuyanwen1992@gmail.com> at 2018年09月28日 23:26
	 * @param $role_id
	 * @return bool|int
	 */
	public function deleteBy($role_id)
	{
		return $this->getRoleBy($role_id)->delete();
	}

	/**
	 * update
	 *
	 * @author wuyanwen <wuyanwen1992@gmail.com> at 2018年09月28日 23:31
	 * @param $id
	 * @param $data
	 * @return static
	 */
	public function updateBy($id, array $data)
	{
		return self::where('id', $id)->update($data);
	}

	/**
	 * store
	 *
	 * @author wuyanwen <wuyanwen1992@gmail.com> at 2018年09月28日 23:32
	 * @param array $data
	 * @return bool
	 */
	public function store(array $data)
	{
		$this->data($data);

		return $this->save();
	}
}